{"version":3,"file":"static/js/941.d159a994.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Contacts/Section/Section.module.css?e8d7","components/Contacts/Section/Section.jsx","webpack://react-homework-template/./src/components/Contacts/ContactForm/ContactForm.module.css?4d46","redux/contacts/selectors.js","components/Contacts/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Contacts/Filter/Filter.module.css?8ad8","components/Contacts/Filter/Filter.jsx","webpack://react-homework-template/./src/components/Contacts/ContactList/ContactList.module.css?357e","components/Contacts/ContactList/ContactList.jsx","components/Contacts/Contacts.jsx","page/MyContactsPage/MyContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"section\":\"Section_section__HDZEH\",\"title\":\"Section_title__kp0vp\"};","import PropTypes from 'prop-types';\nimport s from \"./Section.module.css\"\n\n\nexport const Section = ({title,children}) => {\n    return (\n        <div className={s.section}>\n          <h1 className={s.title}>{title}</h1>\n          {children}\n        </div>\n    )\n};\n\nSection.propTypes = {\n    title : PropTypes.string.isRequired,\n    children : PropTypes.node.isRequired,\n}","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__uSHHN\",\"label\":\"ContactForm_label__khzlp\",\"input\":\"ContactForm_input__UVgk1\",\"button\":\"ContactForm_button__EOePg\"};","export const selectItems = ({ contacts }) => contacts.items;\nexport const selectState = ({ contacts }) => ({\n  loading: contacts.loading,\n  error: contacts.error,\n});\nexport const selectFilter = state => state.filters;","import { useState } from \"react\";\nimport s from \"./ContactForm.module.css\"\nimport { addContact } from \"redux/contacts/operation\";\nimport { useDispatch,useSelector} from 'react-redux';\nimport { selectItems } from \"redux/contacts/selectors\";\n\n\nexport const ContactForm = () => {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n  const contacts = useSelector(selectItems);\n  const dispatch = useDispatch();\n\n  \n\n const handleChange = (event) => {\n  const {name,value} = event.target\n    switch (name) {\n      case \"name\" :\n        setName(value)\n        break;\n      case \"number\" :\n        setNumber(value)\n        break;\n      default :\n        return\n      }\n    };\n\n const handleSubmit = event => {\n    event.preventDefault();\n    setName(\"\");\n    setNumber(\"\");\n\n    if (contacts?.some(contact => contact.name.toLowerCase() === name.toLowerCase())\n    ) {\n      return alert(`${name} is already in contacts.`);\n    }\n    dispatch(addContact({name,number}))\n  };\n\n    return (\n      <form className={s.form} onSubmit={handleSubmit}>\n        <label className={s.label}>\n          Name\n          <input\n          className={s.input}\n            value={name}\n            onChange={handleChange}\n            type=\"text\"\n            name=\"name\"\n             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\" \n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n        <label className={s.label} >\n          Number\n          <input\n            className={s.input}\n            value={number}\n            onChange={handleChange}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\" \n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n\n        <button className={s.button} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n}","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"Filter_label__Fnzmv\",\"input\":\"Filter_input__MhK8h\"};","import PropTypes from 'prop-types';\nimport s from \"./Filter.module.css\"\n\n\nexport const Filter = ({value,changeContact}) => {\n    return (\n        <label className={s.label}>\n             Find contacts by name\n            <input \n            className={s.input}\n            type = \"text\"\n            value = {value}\n            onChange = {changeContact}\n            />\n        </label>\n    )\n}\n\nFilter.propTypes = {\n    value : PropTypes.string.isRequired,\n    changeContact : PropTypes.func.isRequired,\n}","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__fXD-0\",\"item\":\"ContactList_item__cUsHr\",\"btn\":\"ContactList_btn__2QVfU\"};","import PropTypes from 'prop-types'\nimport s from \"./ContactList.module.css\"\n\n\nexport const ContactList = ({ contacts, onDeleteContact }) => (\n  <ul className={s.list}>\n    {contacts.map(({ id, name, number }) => {\n      return (\n        <li key={id} className = {s.item}>\n        <p className={s.info}>\n          {name}: {number}\n        </p>\n        <button\n          className={s.btn}\n          type=\"submit\"\n          onClick={() => onDeleteContact(id)}>\n          X\n        </button>\n      </li>\n      )\n    })}\n    </ul>\n);\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n  onDeleteContact: PropTypes.func.isRequired,\n};","import { Section } from \"./Section/Section\";\nimport { ContactForm } from \"./ContactForm/ContactForm\";\nimport { Filter } from \"./Filter/Filter\";\nimport { ContactList } from \"./ContactList/ContactList\";\nimport Loader  from \"components/Loader/Loader\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from \"redux/contacts/filterSlice\";\nimport { useEffect } from \"react\";\nimport { fetchContacts,deleteContact } from \"redux/contacts/operation\";\nimport { selectItems,selectFilter, selectState } from \"redux/contacts/selectors\";\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const filters = useSelector(selectFilter);\n  const contacts = useSelector(selectItems)\n  const {loading,error} = useSelector(selectState)\n\n  useEffect(() => {\n    dispatch(fetchContacts())\n}, [dispatch]);\n \nconst deleteContactItem = (id) => dispatch(deleteContact(id));\n\nconst changeContact = event => {\n  dispatch(setFilter(event.currentTarget.value));\n}\n\n const visibleUser = contacts.filter(items =>\n  items.name.toLowerCase().includes(filters.toLowerCase())\n); \n\n  return (\n    <>\n  <Section title=\"Phonebook\">\n    <ContactForm />\n      {contacts.length === 0 ? (null) :\n        <Filter value={filters} \n        changeContact={changeContact} \n    />}\n  </Section>\n      {contacts.length === 0 ? (null) :\n      <Section title = \"Contacts\">\n        {!loading && contacts.length > 0 && <ContactList contacts = {visibleUser} \n        onDeleteContact = {deleteContactItem}\n        />}\n        {loading && <Loader />}\n      </Section>\n      }\n      {error && <p>oops, something went wrong</p>}\n    </>\n  )\n}\nexport default Contacts","import Contacts from \"components/Contacts/Contacts\";\n\nconst MyContactsPage = () => <Contacts />\nexport default MyContactsPage"],"names":["Section","title","children","className","s","selectItems","contacts","items","selectState","loading","error","selectFilter","state","filters","ContactForm","useState","name","setName","number","setNumber","useSelector","dispatch","useDispatch","handleChange","event","target","value","onSubmit","preventDefault","some","contact","toLowerCase","alert","addContact","onChange","type","pattern","required","Filter","changeContact","ContactList","onDeleteContact","map","id","onClick","useEffect","fetchContacts","visibleUser","filter","includes","length","setFilter","currentTarget","deleteContact","Loader"],"sourceRoot":""}